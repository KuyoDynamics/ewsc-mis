// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id   String @id @default(uuid())
  code String @unique
  name String @unique
  flag Bytes  @db.ByteA

  // Relation Fields
  provinces     Province[]
  organisations Organisation[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@index([name])
}

model Province {
  id   String @id @default(uuid())
  code String @unique
  name String @unique

  // Relation Fields
  countryId String
  country   Country    @relation(fields: [countryId], references: [id])
  districts District[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([code, name, countryId])
  @@index([code, name])
}

model District {
  id   String @id @default(uuid())
  name String
  code String

  // Relation Fields
  provinceId    String
  province      Province               @relation(fields: [provinceId], references: [id])
  organisations OrganisationDistrict[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, code, provinceId])
  @@index([name])
}

model Organisation {
  id   String @id @default(uuid())
  name String @unique
  logo Bytes? @db.ByteA

  // Relation Fields
  countryId String
  country   Country                @relation(fields: [countryId], references: [id])
  districts OrganisationDistrict[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@index([id, name])
}

model OrganisationDistrict {
  // Relation Fields
  id String @id @default(uuid())
  organisationId       String                @map("organisation_id")
  districtId           String                @map("district_id")
  organisation         Organisation          @relation(fields: [organisationId], references: [id])
  district             District              @relation(fields: [districtId], references: [id])
  waterTreatmentPlants WaterTreatmentPlant[]

  // Timestamps
  createdAt      DateTime @default(now()) 
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([organisationId, districtId])
  @@index([districtId])
}

model WaterTreatmentPlant {
  id                 String      @id @default(uuid())
  name               String
  waterSource        WaterSource @map("water_source")
  productionCapacity Float @map("production_capacity")
  gps                String?

  // Relation Fields
  organisationDistrictId String @map("organisation_district_id")
  district       OrganisationDistrict @relation(fields: [organisationDistrictId], references: [id])
  waterProductionSites WaterProductionSite[]

  // Timestamps
  createdAt      DateTime @default(now()) 
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, organisationDistrictId])
  @@index([name, id])
}


model WaterProductionSite {
  id String @id @default(uuid())
  name String
  staticSuctionHead Float @map("static_suction_head")
  staticDischargeHead Float @map("static_discharge_head")
  gps String?
  type WaterProductionSiteType

  // Relation Fields
  plantId String 
  waterTreatmentPlant WaterTreatmentPlant @relation(fields: [plantId], references: [id])

  // Timestamps
  createdAt      DateTime @default(now()) 
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@index([id,type])
}

enum WaterProductionSiteType {
  BOREHOLE @map("borehole")
  DAM @map("dam")
}

enum WaterSource {
  SURFACE  @map("surface")
  GROUND   @map("ground")
}
