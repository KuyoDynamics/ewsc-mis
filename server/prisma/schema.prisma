// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = ""
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//====================SYSTEM TABLES===================
model Country {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique
  name String @unique
  flag Bytes? @db.ByteA

  // Relation Fields
  provinces     Province[]
  organisations Organisation[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("country")
}

model Province {
  id   String @id @default(uuid()) @db.Uuid
  code String
  name String

  // Relation Fields
  country_id String     @db.Uuid
  country    Country    @relation(fields: [country_id], references: [id])
  districts  District[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([code, name, country_id])
  @@map("province")
}

model District {
  id   String @id @default(uuid()) @db.Uuid
  name String
  code String

  // Relation Fields
  province_id               String              @db.Uuid
  province                  Province            @relation(fields: [province_id], references: [id])
  organisations_in_district CatchmentDistrict[] @relation("organisations_in_district")

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, code, province_id])
  @@map("district")
}

model Organisation {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
  logo Bytes? @db.ByteA

  // Relation Fields
  country_id          String              @db.Uuid
  country             Country             @relation(fields: [country_id], references: [id])
  catchment_districts CatchmentDistrict[]
  users               OrganisationUser[]


  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, country_id])
  @@map("organisation")
}

model User {
  id                          String   @id @default(uuid()) @db.Uuid
  first_name                  String
  last_name                   String
  email                       String   @unique
  password                    String
  hashed_confirmation_token   String
  confirmed_at                DateTime @db.Timestamptz()
  hashed_password_reset_token String
  last_login                  DateTime @db.Timestamptz()
  theme                       String

  // Relation Fields
  user_organisations OrganisationUser[]
  user_roles         UserRole[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("user")
}

model UserRole {
  id   String       @id @default(uuid()) @db.Uuid
  role UserRoleType

  // Relation Fields
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  role_scopes UserRoleScope[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("user_role")
}

model UserRoleScope {
  id                String           @id @default(uuid()) @db.Uuid
  scope_level       RoleScopeLevel
  scope_level_id    String           @db.Uuid
  scope_permissions PermissionType[]

  // Relations Fields
  user_role_id String   @db.Uuid
  user_role    UserRole @relation(fields: [user_role_id], references: [id])


  @@unique([scope_level, scope_level_id, user_role_id])
  @@map("user_role_scope")
}

model OrganisationUser {
  id       String  @id @db.Uuid
  is_owner Boolean @default(false)

  // Relation Fields
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id])

  district_users DistrictUser[]

  // Timestamps
  invited_at       DateTime           @default(now()) @db.Timestamptz()
  invited_by       String             @db.Uuid
  invitation_mode  UserInvitationMode
  last_modified_at DateTime           @updatedAt @db.Timestamptz()
  last_modified_by String             @db.Uuid

  @@unique([user_id, organisation_id])
  @@map("organisation_user")
}

model DistrictUser {
  id String @id @db.Uuid

  // Relation Fields
  organisation_user_id String           @map("organisation_user_id") @db.Uuid
  organisation_user    OrganisationUser @relation(fields: [organisation_user_id], references: [id])

  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([organisation_user_id, catchment_district_id])
  @@map("district_user")
}

model CatchmentDistrict {
  id String @id @default(uuid()) @db.Uuid

  // Relation Fields
  district_id String   @db.Uuid
  district    District @relation("organisations_in_district", fields: [district_id], references: [id])

  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id])

  water_treatment_plants WaterTreatmentPlant[]
  service_areas          ServiceArea[]
  sewer_treatment_plants SewerTreatmentPlant[]
  reports                Report[]
  users                  DistrictUser[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([organisation_id, district_id])
  @@map("catchment_district")
}

//=============================WATER====================================

model WaterTreatmentPlant {
  id                  String          @id @default(uuid()) @db.Uuid
  name                String
  water_source        WaterSourceType
  production_capacity Float
  gps                 String?

  // Relation Fields
  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  water_production_sites WaterProductionSite[]
  water_storage_tanks    WaterStorageTank[]
  water_network          WaterNetwork?

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, catchment_district_id])
  @@map("water_treatment_plant")
}

model WaterProductionSite {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  static_suction_head   Float
  static_discharge_head Float
  gps                   String?
  type                  WaterProductionSiteType

  // Relation Fields
  plant_id              String              @db.Uuid
  water_treatment_plant WaterTreatmentPlant @relation(fields: [plant_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_production_site")
}

model WaterStorageTank {
  id               String               @id @default(uuid()) @db.Uuid
  name             String
  type             WaterStorageTankType
  storage_capacity Float
  gps              String?

  // Relation Fields
  plant_id              String              @db.Uuid
  water_treatment_plant WaterTreatmentPlant @relation(fields: [plant_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_storage_tank")
}

model WaterNetwork {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Relation fields
  plant_id                       String                       @unique @db.Uuid
  water_treatment_plant          WaterTreatmentPlant          @relation(fields: [plant_id], references: [id])
  type                           NetworkOwnershipType
  service_area_water_connections ServiceAreaWaterConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_network")
}

//======================SERVICE AREA====================================

model ServiceArea {
  id                  String                    @id @default(uuid()) @db.Uuid
  name                String
  cost_classification ServiceAreaClassification

  // Relation Fields
  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  service_area_water_connections ServiceAreaWaterConnection[]
  service_area_sewer_connections ServiceAreaSewerConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, catchment_district_id])
  @@map("service_area")
}

model ServiceAreaWaterConnection {
  connections BigInt

  // Relation Fields
  water_netowrk_id String       @db.Uuid
  water_network    WaterNetwork @relation(fields: [water_netowrk_id], references: [id])

  service_area_id String      @db.Uuid
  service_area    ServiceArea @relation(fields: [service_area_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@id([water_netowrk_id, service_area_id])
  @@map("service_area_water_connection")
}

//=========================SEWER================================

model SewerTreatmentPlant {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  capacity Float
  ponds    Int
  gps      String?

  // Relation Fields
  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])
  sewer_network         SewerNetwork?

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, catchment_district_id])
  @@map("sewer_treatment_plant")
}

model SewerNetwork {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Relation fields
  plant_id              String              @unique @db.Uuid
  sewer_treatment_plant SewerTreatmentPlant @relation(fields: [plant_id], references: [id])

  type                           NetworkOwnershipType
  service_area_sewer_connections ServiceAreaSewerConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("sewer_network")
}

model ServiceAreaSewerConnection {
  connections BigInt

  // Relation Fields
  sewer_netowrk_id String       @db.Uuid
  sewer_network    SewerNetwork @relation(fields: [sewer_netowrk_id], references: [id])

  service_area_id String      @db.Uuid
  service_area    ServiceArea @relation(fields: [service_area_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@id([sewer_netowrk_id, service_area_id])
  @@map("service_area_sewer_connection")
}

//================REPORTS==============================

model Report {
  id                          String   @id @default(uuid()) @db.Uuid
  reporting_period            String
  reporting_period_start_date DateTime
  reporting_period_end_date   DateTime
  report_due_date             DateTime @db.Timestamptz()
  reporting_date              DateTime @db.Timestamptz()

  // Relation Fields
  report_type_id String?     @db.Uuid
  report_type    ReportType? @relation(fields: [report_type_id], references: [id])

  catchment_district_id String?            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict? @relation(fields: [catchment_district_id], references: [id])

  indicator_reports IndicatorReport[]
  report_approvals  ReportApproval[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([reporting_period, report_type_id, catchment_district_id])
  @@map("report")
}

model ReportType {
  id        String             @id @default(uuid()) @db.Uuid
  type      ReportTypeOption
  frequency ReportingFrequency
  window    Int

  // Relation Fields
  reports    Report[]
  indicators Indicator[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("report_type")
}

model IndicatorReport {
  id String @id @default(uuid()) @db.Uuid

  target   Float?
  achieved Float
  comment  String?

  // Relation Fields
  report_id String @db.Uuid
  report    Report @relation(fields: [report_id], references: [id])

  indicator_id String    @db.Uuid
  indicator    Indicator @relation(fields: [indicator_id], references: [id])

  disaggregate_id String       @db.Uuid
  disaggegate     Disaggregate @relation(fields: [disaggregate_id], references: [id])

  disaggregate_option_set_id String                @db.Uuid
  disaggregate_option_set    DisaggregateOptionSet @relation(fields: [disaggregate_option_set_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([report_id, indicator_id])
  @@map("indicator_report")
}

model ReportApproval {
  id            String         @id @default(uuid()) @db.Uuid
  status        ApprovalStatus
  date_approved DateTime
  date_rejected DateTime

  // Relation Fields
  assigned_to String @db.Uuid
  approved_by String @db.Uuid
  rejected_by String @db.Uuid

  report_id String @db.Uuid
  report    Report @relation(fields: [report_id], references: [id])

  comments ReportApprovalComment[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([report_id])
  @@map("report_approval")
}

model ReportApprovalComment {
  id           String   @id @default(uuid()) @db.Uuid
  comment      String
  comment_date DateTime

  // Relation Fields
  commented_by String @db.Uuid

  report_id String         @db.Uuid
  report    ReportApproval @relation(fields: [report_id], references: [report_id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("report_approval_comment")
}

//==============================INDICATORS================================

model Indicator {
  id               String @id @default(uuid()) @db.Uuid
  indicator_number String
  description      String @unique
  category         String

  // Relation Fields
  report_type_id String     @db.Uuid
  report_type    ReportType @relation(fields: [report_type_id], references: [id])

  indicator_unit_id String        @db.Uuid
  indicator_unit    IndicatorUnit @relation(fields: [indicator_unit_id], references: [id])

  disaggregate_id String       @db.Uuid
  disaggregate    Disaggregate @relation(fields: [disaggregate_id], references: [id])

  indicator_reports IndicatorReport[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("indicator")
}

model IndicatorUnit {
  id           String @id @default(uuid()) @db.Uuid
  unit         String @unique
  display_name String @unique

  // Relation Fields
  indicators Indicator[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("indicator_unit")
}

model Disaggregate {
  id   String           @id @default(uuid()) @db.Uuid
  name String           @unique
  type DisaggregateType //default the table with one row of number disaggregate and users should not be allowed to create a disaggregate of this type

  // Relation Fields
  option_set DisaggregateOptionSet[]
  indicators Indicator[]

  indicator_reports IndicatorReport[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("disaggregate")
}

model DisaggregateOptionSet {
  id String @id @default(uuid()) @db.Uuid

  // Relation Fields
  disaggregate_id String       @db.Uuid
  disaggregate    Disaggregate @relation(fields: [disaggregate_id], references: [id])

  disaggregate_option_id String             @db.Uuid
  disaggregate_option    DisaggregateOption @relation(fields: [disaggregate_option_id], references: [id])

  indictor_reports IndicatorReport[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("disaggregate_option_set")
}

model DisaggregateOption {
  id          String @id @default(uuid()) @db.Uuid
  option_name String @unique

  // Relation Fields
  option_set DisaggregateOptionSet[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("disaggregate_option")
}

//===============ENUMS=================================

enum DisaggregateType {
  NUMBER           @map("number")
  WITH_PARAMETERS  @map("with_parameters")

  @@map("disaggregate_type")
}

enum PermissionType {
  VIEW    @map("view")
  CREATE  @map("create")
  UPDATE  @map("update")
  DELETE  @map("delete")

  @@map("permission_type")
}

enum RoleScopeLevel {
  ORGANISATION  @map("organisation")
  DISTRICT      @map("district")

  @@map("role_scope_level")
}

enum UserRoleType {
  SUPPORT     @map("support")
  ADMIN       @map("admin")
  APPROVER    @map("approver")
  DATA_ENTRY  @map("data_entry")
  USER        @map("user")

  @@map("user_role_type")
}

enum UserInvitationMode {
  SYSTEM  @map("system_initiated")
  USER    @map("user_initiated")

  @@map("user_invitation_mode")
}

enum ApprovalStatus {
  PENDING      @map("pending")
  IN_PROGRESS  @map("in_progress")
  APPROVED     @map("approved")
  REJECTED     @map("rejected")

  @@map("approval_status")
}

enum ReportTypeOption {
  PUBLIC_RELATIONS  @map("public_relations")
  COMMERCIAL        @map("commercial")
  TECHNICAL         @map("technical")
  PURCHASE_SUPPLY   @map("purchase_supply")
  PERSONNEL         @map("personnel")
  FINANCE           @map("finance")
  IT                @map("it")
  INVENTORY         @map("inventory")

  @@map("report_type_option")
}

enum ReportingFrequency {
  WEEKLY      @map("weekly")
  MONTHLY     @map("monthly")
  QUARTERLY   @map("quarterly")
  BI_ANNUALY  @map("bi_annually")
  ANNUALLY    @map("annually")

  @@map("reporting_frequency")
}

enum ServiceAreaClassification {
  HIGH_COST    @map("high-cost")
  LOW_COST     @map("low-cost")
  MEDIUM_COST  @map("medium-cost")
  PERI_URBAN   @map("peri-urban")
  RURAL        @map("rural")

  @@map("service_area_classification")
}

enum NetworkOwnershipType {
  INDEPENDENT  @map("independent")
  INTERNAL     @map("internal")

  @@map("network_ownership_type")
}

enum WaterStorageTankType {
  PRODUCTION    @map("production")
  DISTRIBUTION  @map("distribution")

  @@map("water_storage_tank_type")
}

enum WaterProductionSiteType {
  BOREHOLE  @map("borehole")
  DAM       @map("dam")

  @@map("water_production_site_type")
}

enum WaterSourceType {
  SURFACE  @map("surface")
  GROUND   @map("ground")

  @@map("water_source_type")
}
