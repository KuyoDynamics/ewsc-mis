// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = ""
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique
  name String @unique
  flag Bytes?  @db.ByteA

  // Relation Fields
  provinces     Province[]
  organisations Organisation[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("country")
}

model Province {
  id   String @id @default(uuid()) @db.Uuid
  code String
  name String

  // Relation Fields
  country_id String     @db.Uuid
  country    Country    @relation(fields: [country_id], references: [id])
  districts  District[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([code, name, country_id])
  @@map("province")
}

model District {
  id   String @id @default(uuid()) @db.Uuid
  name String
  code String

  // Relation Fields
  province_id   String                 @db.Uuid
  province      Province               @relation(fields: [province_id], references: [id])
  organisations OrganisationCatchment[] 

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, code, province_id])
  @@map("district")
}

model Organisation {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
  logo Bytes? @db.ByteA

  // Relation Fields
  country_id String                 @db.Uuid
  country    Country                @relation(fields: [country_id], references: [id])
  catchment_districts  OrganisationCatchment[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, country_id])
  @@map("organisation")
}

model OrganisationCatchment {
  // Relation Fields
  id                     String                @id @default(uuid()) @db.Uuid
  organisation_id        String                @db.Uuid
  district_id            String                @db.Uuid
  organisation           Organisation          @relation(fields: [organisation_id], references: [id])
  district               District              @relation(fields: [district_id], references: [id])
  water_treatment_plants WaterTreatmentPlant[]
  service_areas          ServiceArea[]
  sewer_treatment_plants SewerTreatmentPlant[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([organisation_id, district_id])
  @@map("organisation_district")
}

model WaterTreatmentPlant {
  id                  String      @id @default(uuid()) @db.Uuid
  name                String
  water_source        WaterSource
  production_capacity Float
  gps                 String?

  // Relation Fields
  district_id String                @db.Uuid
  district                 OrganisationCatchment  @relation(fields: [district_id], references: [id])
  water_production_sites   WaterProductionSite[]
  water_storage_tanks      WaterStorageTank[]
  water_network            WaterNetwork?

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, district_id])
  @@map("water_treatment_plant")
}

model WaterProductionSite {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  static_suction_head   Float
  static_discharge_head Float
  gps                   String?
  type                  WaterProductionSiteType

  // Relation Fields
  plant_id              String              @db.Uuid
  water_treatment_plant WaterTreatmentPlant @relation(fields: [plant_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_production_site")
}

model WaterStorageTank {
  id               String               @id @default(uuid()) @db.Uuid
  name             String
  type             WaterStorageTankType
  storage_capacity Float
  gps              String?

  // Relation Fields
  plant_id              String              @db.Uuid
  water_treatment_plant WaterTreatmentPlant @relation(fields: [plant_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_storage_tank")
}

model WaterNetwork {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Relation fields
  plant_id                       String                       @db.Uuid @unique
  water_treatment_plant          WaterTreatmentPlant          @relation(fields: [plant_id], references: [id])
  type                           NetworkOwnershipType
  service_area_water_connections ServiceAreaWaterConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_network")
}

model ServiceArea {
  id                  String          @id @default(uuid()) @db.Uuid
  name                String
  cost_classification ServiceAreaType

  // Relation Fields
  district_id       String                       @db.Uuid
  district                       OrganisationCatchment         @relation(fields: [district_id], references: [id])
  service_area_water_connections ServiceAreaWaterConnection[]
  service_area_sewer_connections ServiceAreaSewerConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, district_id])
  @@map("service_area")
}

model ServiceAreaWaterConnection {
  connections BigInt

  // Relation Fields
  water_netowrk_id String       @db.Uuid
  water_network    WaterNetwork @relation(fields: [water_netowrk_id], references: [id])

  service_area_id String      @db.Uuid
  service_area    ServiceArea @relation(fields: [service_area_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@id([water_netowrk_id, service_area_id])
  @@map("service_area_water_connection")
}

model SewerTreatmentPlant {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  capacity Float
  ponds    Int
  gps      String?

  // Relation Fields
  district_id String               @db.Uuid
  district                 OrganisationCatchment @relation(fields: [district_id], references: [id])
  sewer_network            SewerNetwork?

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, district_id])
  @@map("sewer_treatment_plant")
}

model SewerNetwork {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Relation fields
  plant_id                       String                       @db.Uuid @unique
  sewer_treatment_plant          SewerTreatmentPlant          @relation(fields: [plant_id], references: [id])
  type                           NetworkOwnershipType
  service_area_sewer_connections ServiceAreaSewerConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("sewer_network")
}

model ServiceAreaSewerConnection {
  connections BigInt

  // Relation Fields
  sewer_netowrk_id String       @db.Uuid
  sewer_network    SewerNetwork @relation(fields: [sewer_netowrk_id], references: [id])

  service_area_id String      @db.Uuid
  service_area    ServiceArea @relation(fields: [service_area_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@id([sewer_netowrk_id, service_area_id])
  @@map("service_area_sewer_connection")
}


//================REPORTS==============================

model Report {
  id String @id @default(uuid()) @db.Uuid
  reporting_period String
  due_date DateTime @db.Timestamptz()
  reporting_date DateTime @db.Timestamptz()

  @@map("report")
}



//===============ENUMS=================================


enum ServiceAreaType {
  HIGH_COST    @map("high-cost")
  LOW_COST     @map("low-cost")
  MEDIUM_COST  @map("medium-cost")
  PERI_URBAN   @map("peri-urban")
  RURAL        @map("rural")
}

enum NetworkOwnershipType {
  INDEPENDENT  @map("independent")
  INTERNAL     @map("internal")
}

enum WaterStorageTankType {
  PRODUCTION    @map("production")
  DISTRIBUTION  @map("distribution")
}

enum WaterProductionSiteType {
  BOREHOLE  @map("borehole")
  DAM       @map("dam")
}

enum WaterSource {
  SURFACE  @map("surface")
  GROUND   @map("ground")
}
