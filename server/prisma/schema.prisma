// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// generator erd {
//   provider = ""
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//====================SYSTEM TABLES===================
model Country {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique
  name String @unique
  flag Bytes? @db.ByteA

  // Relation Fields
  provinces     Province[]
  organisations Organisation[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("country")
}

model Province {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique
  name String

  // Relation Fields
  country_id                String              @db.Uuid
  country                   Country             @relation(fields: [country_id], references: [id])
  districts                 District[]
  organisations_in_province CatchmentProvince[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, country_id])
  @@map("province")
}

model District {
  id   String @id @default(uuid()) @db.Uuid
  name String
  code String @unique

  // Relation Fields
  province_id               String              @db.Uuid
  province                  Province            @relation(fields: [province_id], references: [id])
  organisations_in_district CatchmentDistrict[]
  residences                Residence[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, province_id])
  @@map("district")
}

//======================RESIDENCE AND SERVICE AREA====================================
model Residence {
  id                  String                  @id @default(uuid()) @db.Uuid
  name                String
  cost_classification ResidenceClassification

  // Relation Fields
  district_id String   @map("district_id") @db.Uuid
  district    District @relation(fields: [district_id], references: [id])

  service_areas ServiceArea[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, district_id])
  @@map("residence")
}

model ServiceArea {
  id String @id @default(uuid()) @db.Uuid

  // Relation Fields
  residence_id String    @db.Uuid
  residence    Residence @relation(fields: [residence_id], references: [id])

  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  service_area_water_connections ServiceAreaWaterConnection[]
  service_area_sewer_connections ServiceAreaSewerConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([residence_id, catchment_district_id])
  @@map("service_area")
}

model Organisation {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
  logo Bytes? @db.ByteA

  // Relation Fields
  country_id                    String                       @db.Uuid
  country                       Country                      @relation(fields: [country_id], references: [id])
  catchment_provinces           CatchmentProvince[]
  users                         OrganisationUser[]
  organisation_report_templates OrganisationReportTemplate[]

  organisation_indicators OrganisationIndicator[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, country_id])
  @@map("organisation")
}

model User {
  id                          String             @id @default(uuid()) @db.Uuid
  first_name                  String
  last_name                   String
  email                       String             @unique
  password                    String
  hashed_confirmation_token   String?
  confirmed_at                DateTime?          @db.Timestamptz()
  hashed_password_reset_token String?
  last_login                  DateTime?          @db.Timestamptz()
  theme                       UserTheme          @default(LIGHT)
  disabled                    Boolean            @default(false)
  master_support              Boolean            @default(false)
  // Relation Fields
  user_organisations          OrganisationUser[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("user")
}

model OrganisationUser {
  id                      String                   @id @default(uuid()) @db.Uuid
  role                    OrganisationUserRoleType @default(USER)
  is_default_organisation Boolean                  @default(false)

  // Relation Fields
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id])

  district_users DistrictUser[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  @@unique([user_id, organisation_id])
  @@map("organisation_user")
}

model DistrictUser {
  id String @id @default(uuid()) @db.Uuid

  is_default_user_district Boolean @default(false)

  roles DistrictUserRoleType[]

  // Relation Fields
  organisation_user_id String           @map("organisation_user_id") @db.Uuid
  organisation_user    OrganisationUser @relation(fields: [organisation_user_id], references: [id], onDelete: Cascade)

  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([organisation_user_id, catchment_district_id])
  @@map("district_user")
}

model UserInvitation {
  id                     String   @id @db.Uuid
  ttl                    DateTime
  email_addresses        String[]
  organisation_id        String   @db.Uuid
  catchment_district_ids String[] @db.Uuid
  invitation_token       String   @unique

  @@map("user_invitation")
}

model CatchmentDistrict {
  id       String  @id @default(uuid()) @db.Uuid
  disabled Boolean @default(true)

  // Relation Fields
  district_id String   @db.Uuid
  district    District @relation(fields: [district_id], references: [id])

  catchment_province_id String            @db.Uuid
  catchment_province    CatchmentProvince @relation(fields: [catchment_province_id], references: [id])

  water_treatment_plants WaterTreatmentPlant[]
  service_areas          ServiceArea[]
  sewer_treatment_plants SewerTreatmentPlant[]
  reports                Report[]
  users                  DistrictUser[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([catchment_province_id, district_id])
  @@map("catchment_district")
}

model CatchmentProvince {
  id       String  @id @default(uuid()) @db.Uuid
  disabled Boolean @default(true)

  // Relation Fields
  province_id String   @db.Uuid
  province    Province @relation(fields: [province_id], references: [id])

  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id])

  catchment_districts CatchmentDistrict[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([organisation_id, province_id])
  @@map("catchment_province")
}

//=============================WATER====================================

model WaterTreatmentPlant {
  id                  String          @id @default(uuid()) @db.Uuid
  name                String
  water_source        WaterSourceType
  production_capacity Float
  gps                 String?

  // Relation Fields
  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  water_production_sites WaterProductionSite[]
  water_storage_tanks    WaterStorageTank[]
  water_network          WaterNetwork?

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, catchment_district_id])
  @@map("water_treatment_plant")
}

model WaterProductionSite {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  static_suction_head   Float
  static_discharge_head Float
  gps                   String?
  type                  WaterProductionSiteType

  // Relation Fields
  plant_id              String              @db.Uuid
  water_treatment_plant WaterTreatmentPlant @relation(fields: [plant_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_production_site")
}

model WaterStorageTank {
  id               String               @id @default(uuid()) @db.Uuid
  name             String
  type             WaterStorageTankType
  storage_capacity Float
  gps              String?

  // Relation Fields
  plant_id              String              @db.Uuid
  water_treatment_plant WaterTreatmentPlant @relation(fields: [plant_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_storage_tank")
}

model WaterNetwork {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Relation fields
  plant_id                       String                       @unique @db.Uuid
  water_treatment_plant          WaterTreatmentPlant          @relation(fields: [plant_id], references: [id])
  type                           NetworkOwnershipType
  service_area_water_connections ServiceAreaWaterConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("water_network")
}

model ServiceAreaWaterConnection {
  connections BigInt

  // Relation Fields
  water_netowrk_id String       @db.Uuid
  water_network    WaterNetwork @relation(fields: [water_netowrk_id], references: [id])

  service_area_id String      @db.Uuid
  service_area    ServiceArea @relation(fields: [service_area_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@id([water_netowrk_id, service_area_id])
  @@map("service_area_water_connection")
}

//=========================SEWER================================

model SewerTreatmentPlant {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  capacity Float
  ponds    Int
  gps      String?

  // Relation Fields
  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])
  sewer_network         SewerNetwork?

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, catchment_district_id])
  @@map("sewer_treatment_plant")
}

model SewerNetwork {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Relation fields
  plant_id              String              @unique @db.Uuid
  sewer_treatment_plant SewerTreatmentPlant @relation(fields: [plant_id], references: [id])

  type                           NetworkOwnershipType
  service_area_sewer_connections ServiceAreaSewerConnection[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([name, plant_id])
  @@map("sewer_network")
}

model ServiceAreaSewerConnection {
  connections BigInt

  // Relation Fields
  sewer_netowrk_id String       @db.Uuid
  sewer_network    SewerNetwork @relation(fields: [sewer_netowrk_id], references: [id])

  service_area_id String      @db.Uuid
  service_area    ServiceArea @relation(fields: [service_area_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@id([sewer_netowrk_id, service_area_id])
  @@map("service_area_sewer_connection")
}

//================REPORTS==============================

model Report {
  id                          String   @id @default(uuid()) @db.Uuid
  reporting_period            String
  reporting_period_start_date DateTime
  reporting_period_end_date   DateTime
  report_due_date             DateTime @db.Timestamptz()
  reporting_date              DateTime @db.Timestamptz()

  // Relation Fields
  organisation_report_template_id String                     @db.Uuid
  organisation_report_template    OrganisationReportTemplate @relation(fields: [organisation_report_template_id], references: [id])

  catchment_district_id String            @map("catchment_district_id") @db.Uuid
  catchment_district    CatchmentDistrict @relation(fields: [catchment_district_id], references: [id])

  indicator_disaggregate_reports IndicatorDisaggregateReport[]
  report_approvals               ReportApproval[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([reporting_period, organisation_report_template_id, catchment_district_id])
  @@map("report")
}

model ReportTemplate {
  id        String             @id @default(uuid()) @db.Uuid
  name      String             @unique
  type      IndicatorType
  frequency ReportingFrequency
  window    Int
  icon      Bytes?

  // Relation Fields
  indicators                    Indicator[]
  organisation_report_templates OrganisationReportTemplate[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("report_emplate")
}

model OrganisationReportTemplate {
  id                 String         @id @default(uuid()) @db.Uuid
  // Relation Fields
  report_template_id String         @db.Uuid
  report_template    ReportTemplate @relation(fields: [report_template_id], references: [id])

  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id])

  reports Report[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("organisation_report_template")
}

model IndicatorDisaggregateReport {
  id String @id @default(uuid()) @db.Uuid

  target   Float?
  achieved Float
  comment  String?

  // Relation Fields
  report_id String @db.Uuid
  report    Report @relation(fields: [report_id], references: [id])

  indicator_disaggregate_id String                @db.Uuid
  indicator_disaggregate    IndicatorDisaggregate @relation(fields: [indicator_disaggregate_id], references: [id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([report_id, indicator_disaggregate_id])
  @@map("indicator_disaggregate_report")
}

model ReportApproval {
  id            String         @id @default(uuid()) @db.Uuid
  status        ApprovalStatus
  date_approved DateTime
  date_rejected DateTime

  // Relation Fields
  assigned_to String @db.Uuid
  approved_by String @db.Uuid
  rejected_by String @db.Uuid

  report_id String @db.Uuid
  report    Report @relation(fields: [report_id], references: [id])

  comments ReportApprovalComment[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@unique([report_id])
  @@map("report_approval")
}

model ReportApprovalComment {
  id           String   @id @default(uuid()) @db.Uuid
  comment      String
  comment_date DateTime

  // Relation Fields
  commented_by String @db.Uuid

  report_id String         @db.Uuid
  report    ReportApproval @relation(fields: [report_id], references: [report_id])

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("report_approval_comment")
}

//==============================INDICATORS================================

model Indicator {
  id                        String        @id @default(uuid()) @db.Uuid
  indicator_number          String        @unique
  description               String        @unique
  category                  String
  type                      IndicatorType
  contributing_organisation String        @default("nis")

  // Relation Fields
  report_template_id String         @db.Uuid
  report_template    ReportTemplate @relation(fields: [report_template_id], references: [id])

  indicator_unit_id String        @db.Uuid
  indicator_unit    IndicatorUnit @relation(fields: [indicator_unit_id], references: [id])

  indicator_organisations OrganisationIndicator[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("indicator")
}

model IndicatorUnit {
  id           String @id @default(uuid()) @db.Uuid
  unit         String @unique
  display_name String @unique

  // Relation Fields
  indicators Indicator[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("indicator_unit")
}

model OrganisationIndicator {
  id String @id @default(uuid()) @db.Uuid

  // Relation Fields
  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id])

  indicator_id String    @db.Uuid
  indicator    Indicator @relation(fields: [indicator_id], references: [id])

  indicator_disaggregates IndicatorDisaggregate[]
  // Timestamps
  created_at              DateTime                @default(now()) @db.Timestamptz()
  created_by              String
  last_modified_at        DateTime                @updatedAt @db.Timestamptz()
  last_modified_by        String

  // Constraints
  @@map("organisation_indicator")
}

model IndicatorDisaggregate {
  id                        String                @id @default(uuid()) @db.Uuid
  organisation_indicator_id String                @db.Uuid
  organisation_indicator    OrganisationIndicator @relation(fields: [organisation_indicator_id], references: [id])

  // Relation Fields
  disaggregate_option_id String             @db.Uuid
  disaggregate_option    DisaggregateOption @relation(fields: [disaggregate_option_id], references: [id])

  indicator_disaggregate_reports IndicatorDisaggregateReport[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("indicator_disaggregate")
}

model Disaggregate {
  id   String           @id @default(uuid()) @db.Uuid
  name String           @unique
  type DisaggregateType

  // Relation Fields
  disaggregate_options DisaggregateOption[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("disaggregate")
}

model DisaggregateOption {
  id String @id @default(uuid()) @db.Uuid

  // Relation Fields
  disaggregate_id String       @db.Uuid
  disaggregate    Disaggregate @relation(fields: [disaggregate_id], references: [id])

  option_id String @db.Uuid
  option    Option @relation(fields: [option_id], references: [id])

  indicator_disaggregates IndicatorDisaggregate[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("disaggregate_option")
}

model Option {
  id          String @id @default(uuid()) @db.Uuid
  option_name String @unique

  // Relation Fields
  disaggregate_options DisaggregateOption[]

  // Timestamps
  created_at       DateTime @default(now()) @db.Timestamptz()
  created_by       String
  last_modified_at DateTime @updatedAt @db.Timestamptz()
  last_modified_by String

  // Constraints
  @@map("option")
}

//===============ENUMS=================================

enum IndicatorType {
  CUSTOM @map("custom")
  NIS    @map("nis")
}

enum DisaggregateType {
  NUMBER          @map("number")
  WITH_PARAMETERS @map("with_parameters")

  @@map("disaggregate_type")
}

enum OrganisationUserRoleType {
  SUPPORT @map("support")
  OWNER   @map("owner")
  ADMIN   @map("admin")
  USER    @map("user")

  @@map("organisation_user_role_type")
}

enum DistrictUserRoleType {
  DISTRICT_MANAGER @map("district_manager")
  APPROVER         @map("approver")
  DATA_ENTRY       @map("data_entry")
  USER             @map("user")

  @@map("district_user_role_type")
}

enum ApprovalStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  APPROVED    @map("approved")
  REJECTED    @map("rejected")

  @@map("approval_status")
}

// enum ReportTypeOption {
//   PUBLIC_RELATIONS  @map("public_relations")
//   COMMERCIAL        @map("commercial")
//   TECHNICAL         @map("technical")
//   PURCHASE_SUPPLY   @map("purchase_supply")
//   PERSONNEL         @map("personnel")
//   FINANCE           @map("finance")
//   IT                @map("it")
//   INVENTORY         @map("inventory")

//   @@map("report_type_option")
// }

enum ReportingFrequency {
  WEEKLY     @map("weekly")
  MONTHLY    @map("monthly")
  QUARTERLY  @map("quarterly")
  BI_ANNUALY @map("bi_annually")
  ANNUALLY   @map("annually")

  @@map("reporting_frequency")
}

enum ResidenceClassification {
  HIGH_COST   @map("high-cost")
  LOW_COST    @map("low-cost")
  MEDIUM_COST @map("medium-cost")
  PERI_URBAN  @map("peri-urban")
  RURAL       @map("rural")

  @@map("residence_classification")
}

enum NetworkOwnershipType {
  INDEPENDENT @map("independent")
  INTERNAL    @map("internal")

  @@map("network_ownership_type")
}

enum WaterStorageTankType {
  PRODUCTION   @map("production")
  DISTRIBUTION @map("distribution")

  @@map("water_storage_tank_type")
}

enum WaterProductionSiteType {
  BOREHOLE @map("borehole")
  DAM      @map("dam")

  @@map("water_production_site_type")
}

enum WaterSourceType {
  SURFACE @map("surface")
  GROUND  @map("ground")

  @@map("water_source_type")
}

enum UserTheme {
  DARK  @map("dark")
  LIGHT @map("light")

  @@map("user_theme")
}
