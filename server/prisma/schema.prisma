// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id   String @id @default(uuid())
  code String @unique
  name String @unique
  flag Bytes  @db.ByteA

  // Relation Fields
  provinces     Province[]
  organisations Organisation[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
}

model Province {
  id   String @id @default(uuid())
  code String @unique
  name String @unique

  // Relation Fields
  countryId String
  country   Country    @relation(fields: [countryId], references: [id])
  districts District[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([code, name, countryId])
}

model District {
  id   String @id @default(uuid())
  name String
  code String

  // Relation Fields
  provinceId    String
  province      Province               @relation(fields: [provinceId], references: [id])
  organisations OrganisationDistrict[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, code, provinceId])
}

model Organisation {
  id   String @id @default(uuid())
  name String @unique
  logo Bytes? @db.ByteA

  // Relation Fields
  countryId String
  country   Country                @relation(fields: [countryId], references: [id])
  districts OrganisationDistrict[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
}

model OrganisationDistrict {
  // Relation Fields
  id                   String                @id @default(uuid())
  organisationId       String                @map("organisation_id")
  districtId           String                @map("district_id")
  organisation         Organisation          @relation(fields: [organisationId], references: [id])
  district             District              @relation(fields: [districtId], references: [id])
  waterTreatmentPlants WaterTreatmentPlant[]
  serviceAreas         ServiceArea[]
  sewerTreatmentPlants SewerTreatmentPlant[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([organisationId, districtId])
}

model WaterTreatmentPlant {
  id                 String      @id @default(uuid())
  name               String
  waterSource        WaterSource @map("water_source")
  productionCapacity Float       @map("production_capacity")
  gps                String?

  // Relation Fields
  organisationDistrictId String                @map("organisation_district_id")
  district               OrganisationDistrict  @relation(fields: [organisationDistrictId], references: [id])
  waterProductionSites   WaterProductionSite[]
  waterStorageTanks      WaterStorageTank[]
  waterNetworks          WaterNetwork[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, organisationDistrictId])
}

model WaterProductionSite {
  id                  String                  @id @default(uuid())
  name                String
  staticSuctionHead   Float                   @map("static_suction_head")
  staticDischargeHead Float                   @map("static_discharge_head")
  gps                 String?
  type                WaterProductionSiteType

  // Relation Fields
  plantId             String
  waterTreatmentPlant WaterTreatmentPlant @relation(fields: [plantId], references: [id])

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
}

model WaterStorageTank {
  id              String               @id @default(uuid())
  name            String
  type            WaterStorageTankType
  storageCapacity Float                @map("storage_capacity")
  gps             String?

  // Relation Fields
  plantId             String
  waterTreatmentPlant WaterTreatmentPlant @relation(fields: [plantId], references: [id])

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, plantId])
}

model WaterNetwork {
  id   String @id @default(uuid())
  name String

  // Relation fields
  plantId                     String
  waterTreatmentPlant         WaterTreatmentPlant          @relation(fields: [plantId], references: [id])
  type                        NetworkOwnershipType
  serviceAreaWaterConnections ServiceAreaWaterConnection[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, plantId])
}

model ServiceArea {
  id                 String          @id @default(uuid())
  name               String
  costClassification ServiceAreaType @map("cost_classification")

  // Relation Fields
  organisationDistrictId      String                       @map("organisation_district_id")
  district                    OrganisationDistrict         @relation(fields: [organisationDistrictId], references: [id])
  serviceAreaWaterConnections ServiceAreaWaterConnection[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, organisationDistrictId])
}

model ServiceAreaWaterConnection {
  connections BigInt

  // Relation Fields
  waterNetowrkId String
  waterNetwork   WaterNetwork @relation(fields: [waterNetowrkId], references: [id])

  serviceAreaId String
  serviceArea   ServiceArea @relation(fields: [serviceAreaId], references: [id])

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@id([waterNetowrkId, serviceAreaId])
}

model SewerTreatmentPlant {
  id       String  @id @default(uuid())
  name     String
  capacity Float
  ponds    Int
  gps      String?

  // Relation Fields
  organisationDistrictId String               @map("organisation_district_id")
  district               OrganisationDistrict @relation(fields: [organisationDistrictId], references: [id])
  sewerNetworks          SewerNetwork[]

  // Constraints
  @@unique([name, organisationDistrictId])
}

model SewerNetwork {
  id   String @id @default(uuid())
  name String

  // Relation fields
  plantId             String
  sewerTreatmentPlant SewerTreatmentPlant  @relation(fields: [plantId], references: [id])
  type                NetworkOwnershipType
  // serviceAreaSewerConnections ServiceAreaSewerConnection[]

  // Timestamps
  createdAt      DateTime @default(now())
  createdBy      String
  lastModifiedAt DateTime @updatedAt
  lastModifiedBy String

  // Constraints
  @@unique([name, plantId])
}

enum ServiceAreaType {
  HIGH_COST    @map("high-cost")
  LOW_COST     @map("low-cost")
  MEDIUM_COST  @map("medium-cost")
  PERI_URBAN   @map("peri-urban")
  RURAL        @map("rural")
}

enum NetworkOwnershipType {
  INDEPENDENT  @map("independent")
  INTERNAL     @map("internal")
}

enum WaterStorageTankType {
  PRODUCTION    @map("production")
  DISTRIBUTION  @map("distribution")
}

enum WaterProductionSiteType {
  BOREHOLE  @map("borehole")
  DAM       @map("dam")
}

enum WaterSource {
  SURFACE  @map("surface")
  GROUND   @map("ground")
}
